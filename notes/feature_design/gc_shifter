    /// p range is 0 to 1, represents gc content of distro, p is
    /// initialized to gc measured from input distibution
    ///
    /// gc prob of each site:
    /// p(gc|x) -> not stochastic -> val(gc|x)
    ///
    /// starting GC:
    /// ps(x), E[gc|b(x)] = sum(x)(ps(x)*val(gc|x))
    ///
    /// with only 2 gc states we can decompose ps into two distros:
    ///
    /// ps(x) = psat(x)*(1-p(gc))+psgc(x)*p(gc)
    ///
    /// with J gc states (each state in [0,1]), each with distro psj
    ///
    /// ps(x) = sum(j)(psj(x)*p(j))
    ///
    /// starting ps(j) is estimated from the starting ps(x), but how does it change as p(gc) is 
    /// changed? p(gc) = sum(j)(val(gc|j)p(j)), which has a j-2 dimensional solution space -- yuk!
    ///
    /// example val(j),p(j) for a gc-rich codon distro:
    ///
    /// p(1)   = 0.6
    /// p(2/3) = 0.2
    /// p(1/3) = 0.1
    /// p(0)   = 0.1
    ///
    /// break starting ps(x) down into two distros based on gc content, so that:
    ///
    /// ps(x) = psat(x)*(1-p(gc))+psgc(x)*p(gc)
    ///
    /// initial estimate of p(gc) from this breakdown is estimated from initial ps()
    ///
    /// p(x) = norm(b(x)*(1-(1+f)*gc(x))
    ///
    /// @p==0 distro=base_disto
    /// @p==inf disto=norm(gc_factor) ... ie nuc a,c,g,t = {0,.5,.5,0}
    /// @p==-inf distro=norm(1-gc_factor) ie nuc a,c,g,t = {0.5,0,0,0.5}
    ///
    /// q=(exp(f)-1) : -1->+inf
    /// p(x)=norm(b(x)*(1+q*gc(x)))
    ///
    /// p(x)=(tanh(atanh(2*b(x)-1)+f*gc)+1)/2
    /// p(x)=norm(b(x)*exp(f*gc))
    /// alt, I don't like as much: 
    /// q=tanh(f)
    /// p(x)=b(x)*(1-abs(q))+abs(q)*(d(q>0)*gc(x)+d(q<0)*(1-gc(x))
    ///
    //
