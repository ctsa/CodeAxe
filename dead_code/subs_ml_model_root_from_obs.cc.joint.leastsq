// -*- mode: c++; indent-tabs-mode: nil; -*-

/// \file subs_ml_model_root_from_obs.cc
///

#include "simple_util.h"
#include "subs_ml_model_root_from_obs.h"
#include "subs_prob_util.h"
#include "util/math/array_util.h"
#include "util/math/linear_solver.h"
#include "util/math/matrix_util.h"
#include "util/math/minimize_conj_direction.h"
#include "util/math/minimize_conj_gradient.h"
#include "util/math/minfunc_interface.h"
#include "util/math/prob_util.h"

#include <iomanip>
#include <iostream>


//#define DEBUG_BGR


static
void
tree_branch_down_obs_state_time_avg(const bi_tree_node* b,
                                    const prob_t*& branch_distro,
                                    prob_t** down_distro_tmp,
                                    const time_gtor& tgm,
                                    const unsigned n_states,
                                    const prob_t* const * leaf_distro){

  const bi_tree_sml_type& tree(tgm.tree());

  if(b==0){
    die("tree_branch_down_obs_state_time_avg: null tree node");

  } else if(b->child1==0 && b->child2==0){  // leaf node
    const unsigned leaf_id(tree.get_leaf_index(b));
    branch_distro = leaf_distro[leaf_id];

  } else  if(b->child1==0 || b->child2==0){
    die("tree_branch_down_obs_state_time_avg: Invalid tree graph");

  } else {  // assume child2 exists
    const prob_t* child1_distro(0);
    const prob_t* child2_distro(0);

    tree_branch_down_obs_state_time_avg(b->child1,child1_distro,down_distro_tmp,
                                        tgm,n_states,leaf_distro);
    tree_branch_down_obs_state_time_avg(b->child2,child2_distro,down_distro_tmp,
                                        tgm,n_states,leaf_distro);

    const smlfloat c1time(tgm.branch_time(tree.get_branch_index(b->child1)));
    const smlfloat c2time(tgm.branch_time(tree.get_branch_index(b->child2)));
    const smlfloat c1ntime(c1time/(c1time+c2time));
    const smlfloat c2ntime(c2time/(c1time+c2time));

    const unsigned node_id(tree.get_node_index(b));
    prob_t* branch_distro_tmp(down_distro_tmp[node_id]);
    branch_distro = branch_distro_tmp;
    for(unsigned i(0);i<n_states;++i){
      branch_distro_tmp[i] = child1_distro[i]*c1ntime + child2_distro[i]*c2ntime;
    }
  }
}



void
subs_ml_model_obs_state_time_avg_root(const subs_ml_model& mdl,
                                      prob_t* root_down_prob){

  const time_gtor& tgm(mdl.get_time_gtor());
  const bi_tree_sml_type& tree(mdl.tree());
  const unsigned n_states(mdl.state_size());
  const prob_t* const * leaf_distro(mdl.obs_seq_state_distro());

  simple_matrix<prob_t> down_distro_tmp(tree.n_nodes(),n_states);

  const prob_t* root_distro(0);
  tree_branch_down_obs_state_time_avg(tree.root,root_distro,down_distro_tmp.val,
                                      tgm,n_states,leaf_distro);

  for(unsigned i(0);i<n_states;++i){ root_down_prob[i] = root_distro[i]; }
}



// store the P(parent(state)|node,parent(node)) for each non-root node in tree
//
static
void
tree_branch_down_prob(const bi_tree_node* const b,
                      const prob_t*& branch_down_prob,
                      prob_t** const branch_down_prob_storage,
                      bool& is_invalid_prob,
                      const time_gtor& tgm,
                      const unsigned n_states,
                      const prob_t* const * const leaf_distro,
                      const prob_t* const * const branch_tprob,
                      smlfloat& branch_weight,
                      prob_t* tmp_store){
  
  const bi_tree_sml_type& tree(tgm.tree());
  const unsigned branch_id(tree.get_branch_index(b));
  prob_t* branch_down_prob_tmp(branch_down_prob_storage[branch_id]);
  branch_down_prob = branch_down_prob_tmp;

  if(b==0){
    die("tree_branch_down_prob: null tree node");

  } else if(b->child1==0 && b->child2==0){  // leaf node
    branch_weight=1;
    const unsigned leaf_id(tree.get_leaf_index(b));
    linear_solver(branch_tprob[branch_id],leaf_distro[leaf_id],branch_down_prob_tmp,n_states);
  } else  if(b->child1==0 || b->child2==0){
    die("tree_branch_down_prob: Invalid tree graph");

  } else { // interior node
    const prob_t* child1_prob(0);
    const prob_t* child2_prob(0);
    smlfloat child1_bw;
    smlfloat child2_bw;

    tree_branch_down_prob(b->child1,child1_prob,branch_down_prob_storage,is_invalid_prob,
                          tgm,n_states,leaf_distro,branch_tprob,child1_bw,tmp_store);
    tree_branch_down_prob(b->child2,child2_prob,branch_down_prob_storage,is_invalid_prob,
                          tgm,n_states,leaf_distro,branch_tprob,child2_bw,tmp_store);

    branch_weight=child1_bw+child2_bw;
    for(unsigned i(0);i<n_states;++i) { 
      tmp_store[i] = (child1_prob[i]*child1_bw+child2_prob[i]*child2_bw)/branch_weight; 
    }
    linear_solver(branch_tprob[branch_id],tmp_store,branch_down_prob_tmp,n_states);
  }

  {
    bool is_nonzero_prob(false);
    for(unsigned i(0);i<n_states;++i){
      if(branch_down_prob_tmp[i]<0.) {
        //        std::cerr << "NPROB: label,i,p(i): " << b->label << " " << i << " " << branch_down_prob_tmp[i] << "\n";

        // the current prob transition matrix could not have generated
        // the distro observed at the base node of this branch:
        branch_down_prob_tmp[i] = 0.;
        is_invalid_prob=true;
      } else if(branch_down_prob_tmp[i]>0.) {
        is_nonzero_prob=true;
      }
    }

    {
      prob_t sum(0.);
      for(unsigned i(0);i<n_states;++i){ sum += branch_down_prob[i]; }
      if( std::fabs(sum -1.) > 1e-3 ) is_invalid_prob = true;
    }    

    if(is_nonzero_prob){
      pdistro_norm(branch_down_prob_tmp,branch_down_prob_tmp+n_states);
    } else {
      pdistro_unif(branch_down_prob_tmp,n_states);
    }
  }

#if DEBUG_BGR
  smlfloat sum(0.);
  for(unsigned i(0);i<n_states;++i){
    sum += branch_down_prob_tmp[i];
  }
  std::cerr << "sum " << sum << "\n";

  std::cerr << "PUGGY " << b->label;
  for(unsigned i(0);i<3;++i){
    std::cerr << " " << branch_down_prob[i];
  }
  std::cerr << "\n";
#endif
}


static
bool
subs_ml_model_root_down_prob_exact_tprob(const subs_ml_model& mdl,
                                         prob_t* root_down_prob,
                                         const prob_t* const * const branch_tprob){
  
  if(mdl.opt().is_ppit) die("subs_ml_model_root_down_prob incompatible with ppit mode");
    
  const time_gtor& tgm(mdl.get_time_gtor());
  const bi_tree_sml_type& tree(tgm.tree());
  const unsigned n_states(mdl.state_size());
  const prob_t* const * leaf_distro(mdl.obs_seq_state_distro());
  
  bool is_invalid_prob(false);
  
  if(! tree.root->child1) {
    for(unsigned i(0);i<n_states;++i) root_down_prob[i] = leaf_distro[0][i];
    return is_invalid_prob;
  }
  
  const unsigned n_branches(tree.n_branches());
  simple_matrix<prob_t> branch_down_prob_storage(n_branches,n_states);
  
  simple_array<prob_t> tmp_store(n_states);
  
  const prob_t* child1_prob(0);
  const prob_t* child2_prob(0);
  smlfloat child1_bw;
  smlfloat child2_bw;
  
  tree_branch_down_prob(tree.root->child1,child1_prob,branch_down_prob_storage.val,is_invalid_prob,
                        tgm,n_states,leaf_distro,branch_tprob,child1_bw,tmp_store.val);
  tree_branch_down_prob(tree.root->child2,child2_prob,branch_down_prob_storage.val,is_invalid_prob,
                        tgm,n_states,leaf_distro,branch_tprob,child2_bw,tmp_store.val);
  
  for(unsigned i(0);i<n_states;++i){ root_down_prob[i]=child1_prob[i]*child1_bw+child2_prob[i]*child2_bw; }
  pdistro_norm(root_down_prob,root_down_prob+n_states);
  
  if(is_invalid_prob){
    std::cerr << "WARNING:: Invalid root distribution generated from current rate matrix\n";
  }

#ifdef DEBUG_BGR  
  std::cerr << "PUPPY";
  for(unsigned i(0);i<3;++i){
    std::cerr << " " << root_down_prob[i];
  }
  std::cerr << "\n";
#endif
  
  return is_invalid_prob;
}



bool
subs_ml_model_root_down_prob_exact_single_cat(const subs_ml_model& mdl,
                                              const unsigned site_category,
                                              const unsigned group_category,
                                              prob_t* root_down_prob){
  
  const time_gtor& tgm(mdl.get_time_gtor());
  const bi_tree_sml_type& tree(tgm.tree());
  const unsigned n_states(mdl.state_size());
  const unsigned n_branches(tree.n_branches());
  
  simple_matrix<prob_t> branch_tprob(n_branches,n_states*n_states);
  get_all_branch_subs_prob(branch_tprob.val,mdl,site_category,group_category,0);

  return subs_ml_model_root_down_prob_exact_tprob(mdl,root_down_prob,branch_tprob.val);
}



struct root_prob_leastsq_minfunc_base : public minfunc_gradient_interface<smlfloat> {

  root_prob_leastsq_minfunc_base(const prob_t * const * const leaf_tprob,
                                 const prob_t * const * const leaf_obs_distro,
                                 const unsigned n_states,
                                 const unsigned n_leaves)
    : _leaf_tprob(leaf_tprob), _leaf_obs_distro(leaf_obs_distro), _n_states(n_states),
      _n_leaves(n_leaves), _root_prob(_n_states), _tmp_store(_n_states) {}

  virtual
  void p_to_root_prob(const smlfloat* p,
                      prob_t* root_prob) const = 0;

  virtual
  void root_prob_to_p(const prob_t* root_prob,
                      smlfloat* p) = 0;

  virtual smlfloat val(const smlfloat* p){
    return val_int(p);
  }

  smlfloat val_int(const smlfloat* p,
                   smlfloat** tval = 0) {

    p_to_root_prob(p,_root_prob.val);

    //    for(unsigned i(0);i<3;++i){
      //      std::cerr << "val_root_prob: i,p(i): " << i << " " << _root_prob.val[i] << "\n";
    //    }

    smlfloat cost(0.);
    for(unsigned i(0);i<_n_leaves;++i){
      smlfloat* tval_int(0);

      if(tval) tval_int=tval[i];
      else     tval_int=_tmp_store.val;

      //      std::fill(_tmp_store,_tmp_store+_n_states,0.);
      //      matrix_vector_mult_sum(_leaf_tprob[i],_root_prob,_tmp_store,_n_states,_n_states);
      for(unsigned i_node(0);i_node<_n_states;++i_node){
        tval_int[i_node] = array_dot(_root_prob.val,_leaf_tprob[i]+i_node*_n_states,_n_states);
      }

      // make up for numeric imprecision:
      pdistro_norm(tval_int,tval_int+_n_states);

      //      cost -= array_dot(tval_int,_leaf_obs_distro[i],_n_states)/
      //  (array_norm2(tval_int,_n_states)*array_norm2(_leaf_obs_distro[i],_n_states));

      for(unsigned j(0);j<_n_states;++j){
        tval_int[j] -=_leaf_obs_distro[i][j];
        cost += tval_int[j]*tval_int[j];
      }
    }
    cost *= cost_scale_factor();
    //    std::cerr << "val report cost: " << cost << "\n";
    return cost;
  }

  // double sided numerical approx derivative:
  virtual
  smlfloat dval(const smlfloat* p,
                smlfloat* dp){

    static const smlfloat delta(1e-5);
    static const smlfloat deltamin(1e-7);

    const unsigned ndim(dim());

    const smlfloat start_cost(val(p));

    simple_array<smlfloat> vcopy(_n_states-1);
    std::copy(p,p+ndim,vcopy.val);
    for(unsigned i(0);i<ndim;++i){
      const smlfloat delchunk(std::max(std::fabs(vcopy.val[i]*delta),deltamin));
      vcopy.val[i] = p[i]+delchunk;
      const smlfloat pluscost(val(vcopy.val));
      vcopy.val[i] = p[i]-delchunk;
      const smlfloat minuscost(val(vcopy.val));
      dp[i] = (pluscost-minuscost)/(delchunk*2.);
    }

    return start_cost;
  }

protected:
  smlfloat cost_scale_factor() const {
    static const smlfloat s(1e6);
    return s/(_n_states*_n_leaves);
  }

  const prob_t * const * const _leaf_tprob;
  const prob_t * const * const _leaf_obs_distro;
  const unsigned _n_states;
  const unsigned _n_leaves;
  simple_array<prob_t> _root_prob;
  simple_array<prob_t> _tmp_store;
};



struct root_prob_leastsq_minfunc : public root_prob_leastsq_minfunc_base {

  typedef root_prob_leastsq_minfunc_base base_t;

  root_prob_leastsq_minfunc(const prob_t * const * const leaf_tprob,
                            const prob_t * const * const leaf_obs_distro,
                            const unsigned n_states,
                            const unsigned n_leaves)
    : base_t(leaf_tprob,leaf_obs_distro,n_states,n_leaves) {}

  virtual
  unsigned dim() const { return _n_states; }

  virtual
  void
  p_to_root_prob(const smlfloat* p,
                 prob_t* root_prob) const {

    const unsigned ndim(dim());

    for(unsigned i(0);i<ndim;++i){
      root_prob[i] = std::fabs(p[i]);
    }
    pdistro_norm(root_prob,root_prob+_n_states);
  }

  virtual
  void
  root_prob_to_p(const prob_t* root_prob,
                 smlfloat* p) {

    const unsigned ndim(dim());

    for(unsigned i(0);i<ndim;++i){ p[i] = root_prob[i]; }
  }
};



struct root_prob_leastsq_minfunc_indy : public root_prob_leastsq_minfunc_base {

  typedef root_prob_leastsq_minfunc_base base_t;

  root_prob_leastsq_minfunc_indy(const prob_t * const * const leaf_tprob,
                                 const prob_t * const * const leaf_obs_distro,
                                 const unsigned n_states,
                                 const unsigned n_leaves)
    : base_t(leaf_tprob,leaf_obs_distro,n_states,n_leaves), _root_key(0) {}

  virtual
  unsigned dim() const { return _n_states-1; }

  virtual
  void
  p_to_root_prob(const smlfloat* p,
                 prob_t* root_prob) const {

    const unsigned ndim(dim());

    for(unsigned i(0);i<ndim;++i){
      root_prob[i] = std::fabs(p[i])*(_root_key+DIV_ZERO_PROTECT_OFFSET());
    }
    root_prob[ndim] = _root_key;
    pdistro_norm(root_prob,root_prob+_n_states);
  }


  virtual
  void
  root_prob_to_p(const prob_t* root_prob,
                 smlfloat* p) {

    const unsigned ndim(dim());

    _root_key=root_prob[ndim];

    for(unsigned i(0);i<ndim;++i){
      p[i] = root_prob[i]/(_root_key+DIV_ZERO_PROTECT_OFFSET());
    }
  }


  virtual
  smlfloat dval(const smlfloat* p,
                smlfloat* dp){

    // analytical derivative:
    //
    // intermediate notes:
    //
    // dtval[leaf,j]_droot[i] = _leaf_tprob[leaf][j][i];
    // dcost_dtval[leaf,j] = 2*tval[leaf,j]*dtval[leaf,j];
    // dcost_droot[i] = 2 * sum_leaf( sum_state( tval[leaf,j]*_leaf_tprob[leaf][j]);
    // root[i](p[i]) = p[i]/(p[i]+A)
    //
    //
    // solution:
    //
    // i=root_state
    // j=leaf_state
    // A = sum(p[!i])+1/(1+DZ/root[ndim])
    // droot[i]_dp[i] = 1/(p[i]+A)-p[i]/(p[i]+A)^2
    // dtval[leaf,j]_dp[i] = _leaf_tprob[leaf][j][i]*(droot[i]_dp[i])
    // dcost_dp[i] = 2*sum_leaf( sum_state( tval[leaf,j]*dtval[leaf,j]_dp[i]))
    //

    const unsigned ndim(dim());

    simple_matrix<smlfloat> tval(_n_leaves,_n_states);

    const smlfloat start_cost(val_int(p,tval.val));

    smlfloat psum(0.);
    for(unsigned i(0);i<ndim;++i) psum += std::fabs(p[i]);

    const smlfloat Aconst(psum+1/(1.+DIV_ZERO_PROTECT_OFFSET()/_root_key));
    const smlfloat inv_Aconst(1./Aconst);

    const smlfloat sum_scale(2.*cost_scale_factor());

    for(unsigned i(0);i<ndim;++i){
      //      const smlfloat A(Aconst-p[i]);
      const smlfloat absp(std::fabs(p[i]));
      const smlfloat droot_dp((inv_Aconst)*(1.-absp*inv_Aconst));

      smlfloat sum(0.);
      for(unsigned leaf(0);leaf<_n_leaves;++leaf){
        const smlfloat* tval_vec(tval.val[leaf]);
        const smlfloat* tprob_vec(_leaf_tprob[leaf]+i*_n_states);
        sum += array_dot(tval_vec,tprob_vec,_n_states)*droot_dp;
      }

      dp[i] = sum*sum_scale;
      if(p[i]<0.) {
        //        std::cerr << "rev"
        dp[i] *= -1;
      }

      // smooth deriv as we approach 0:
      static const smlfloat edge_dist(1e-5);
      if(absp<edge_dist){
        dp[i] *= absp/edge_dist;
      }

      //      std::cerr << "dval2 i,dp: " << i << " " << dp[i] << "\n";
    }

    return start_cost;
  }


private:
  static double DIV_ZERO_PROTECT_OFFSET(){
    static const double d(0.1);
    return d;
  }

  smlfloat _root_key;
};



bool
subs_ml_model_root_down_prob_single_cat(const subs_ml_model& mdl,
                                        const unsigned site_category,
                                        const unsigned group_category,
                                        prob_t* root_down_prob){
  
  const time_gtor& tgm(mdl.get_time_gtor());
  const bi_tree_sml_type& tree(tgm.tree());
  const unsigned n_states(mdl.state_size());
  const unsigned n_branches(tree.n_branches());
  simple_matrix<prob_t> branch_tprob(n_branches,n_states*n_states);

  get_all_branch_subs_prob(branch_tprob.val,mdl,site_category,group_category,0);

#if 0
  // first attempt an exact (per-branch) solution:
  const bool is_neg(subs_ml_model_root_down_prob_exact_tprob(mdl,root_down_prob,branch_tprob.val));
  //    return is_neg;
  //  if(! is_neg) return false;
#else
  std::copy(mdl.obs_state_distro(),mdl.obs_state_distro()+n_states,root_down_prob);
#endif

  // now start the leastsq minimization initializing from the exact (per-branch) solution:

  // step 1, convert branch probs into a set of leaf_to_root probs:
  const unsigned n_leaves(tree.n_leaves());
  simple_matrix<prob_t> leaf_tprob(n_leaves,n_states*n_states);
  {
    simple_array<prob_t> tmp_matrix(n_states*n_states);

    for(unsigned i(0);i<n_leaves;++i){
      unsigned node_index(tree.get_node_index_from_leaf_index(i));
      matrix_copy(branch_tprob.val[node_index-1],leaf_tprob.val[i],n_states);
      while((node_index = tree.get_parent_index(node_index))){
        matrix_copy(leaf_tprob.val[i],tmp_matrix.val,n_states);
        matrix_mult(branch_tprob.val[node_index-1],tmp_matrix.val,leaf_tprob.val[i],n_states);
      }
      matrix_transpose_inplace(leaf_tprob.val[i],n_states);
    }
  } 

  const prob_t* const * leaf_distro(mdl.obs_seq_state_distro());

#if 1
  {
    root_prob_leastsq_minfunc_indy rpm(leaf_tprob.val,leaf_distro,n_states,n_leaves);
    
    const unsigned ndim(rpm.dim());
    
    simple_array<smlfloat> p(ndim);
    
    rpm.root_prob_to_p(root_down_prob,p.val);
    
    {
      const smlfloat ntol(1e-12);
      unsigned iter;
      smlfloat fmin;
      unsigned max_iter(10000);
      minimize_conj_gradient(p.val,rpm,ntol,fmin,iter,max_iter);
      std::cerr << std::setprecision(20);
      std::cerr << "MINI CONJ GRAD MINIMIZER ITERATIONS,fmin: " << std::min(iter+1,max_iter) << " " << fmin << "\n";
                 //           minimize_conj_gradient(p.val,rpm,ntol,fmin,iter,max_iter);
                 // std::cerr << "MINI CONJ GRAD MINIMIZER ITERATIONS: " << std::min(iter+1,max_iter) << "\n";
    }

    rpm.p_to_root_prob(p.val,root_down_prob);
  }
#else               
  {
    root_prob_leastsq_minfunc rpm(leaf_tprob.val,leaf_distro,n_states,n_leaves);
    
    const unsigned ndim(rpm.dim());
    
    simple_array<smlfloat> p(ndim);
    
    rpm.root_prob_to_p(root_down_prob,p.val);
    
    {
      static const smlfloat line_tol(1e-9);
      static const smlfloat start_ratio(0.05);
      static const smlfloat min_start_dist(1e-6);
      
      const smlfloat ntol(1e-13);
      smlfloat start_ntol(ntol);
      unsigned iter;
      smlfloat fmin;
      unsigned max_iter(10000);
      
      smlfloat* conj_dir(new smlfloat[ndim*ndim]);
      std::fill(conj_dir,conj_dir+ndim*ndim,0.);
      for(unsigned i(0);i<ndim;++i) {
        const smlfloat start_dist( std::max(std::fabs(p.val[i]*start_ratio),min_start_dist) );
        conj_dir[i*(ndim+1)] = start_dist;
      }
      minimize_conj_direction(p.val,conj_dir,rpm,start_ntol,ntol,line_tol,fmin,iter,max_iter);
      std::cerr << std::setprecision(20);
      std::cerr << "CONJ DIR MINIMIZER ITERATIONS, fmin: " << std::min(iter+1,max_iter) << " " << fmin << "\n";
      
      delete [] conj_dir;
    }
  
    rpm.p_to_root_prob(p.val,root_down_prob);
  }
#endif

  return false;
}



template <typename Func>
bool
subs_ml_model_root_down_multicat_solver(const subs_ml_model& mdl,
                                        prob_t* root_down_prob,
                                        Func get_cat_root_down_prob) {

  const rate_gtor_base& rg(mdl.get_rate_gtor());

  const unsigned n_group_cats(rg.category_size_group());
  const unsigned n_site_cats(rg.category_size_site());

  std::vector<prob_t> group_cat_prior_pdistro(n_group_cats);
  std::vector<prob_t> site_cat_prior_pdistro(n_site_cats);

  rg.get_group_category_pdistro(group_cat_prior_pdistro.begin());
  rg.get_site_category_pdistro(site_cat_prior_pdistro.begin());

  const unsigned n_states(mdl.state_size());
  simple_array<prob_t> root_down_prob_cat(n_states);

  std::fill(root_down_prob,root_down_prob+n_states,0.);

  bool is_invalid_prob(false);

  for(unsigned gc(0);gc<n_group_cats;++gc){
    for(unsigned sc(0);sc<n_site_cats;++sc){
      const prob_t cat_prob(site_cat_prior_pdistro[sc]*group_cat_prior_pdistro[gc]);

      is_invalid_prob = is_invalid_prob || get_cat_root_down_prob(mdl,sc,gc,root_down_prob_cat.val);

      for(unsigned i(0);i<n_states;++i){
        root_down_prob[i] += root_down_prob_cat.val[i]*cat_prob;
      }
    }
  }

  pdistro_norm(root_down_prob,root_down_prob+n_states);

  return is_invalid_prob;
}



bool
subs_ml_model_root_down_prob_exact(const subs_ml_model& mdl,
                                   prob_t* root_down_prob){

  return subs_ml_model_root_down_multicat_solver(mdl,root_down_prob,
                                                 &subs_ml_model_root_down_prob_exact_single_cat);
}



bool
subs_ml_model_root_down_prob(const subs_ml_model& mdl,
                             prob_t* root_down_prob){

  return subs_ml_model_root_down_multicat_solver(mdl,root_down_prob,
                                                 &subs_ml_model_root_down_prob_single_cat);
}

